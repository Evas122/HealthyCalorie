// <auto-generated />
using System;
using HealthyCalorie.ConsumptionTracking.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyCalorie.ConsumptionTracking.Storage.Migrations
{
    [DbContext(typeof(ConsumptionTrackingDbContext))]
    partial class ConsumptionTrackingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("HealthyCalorie.ConsumptionTracking.Storage.Entities.Consumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FdcId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodFdcId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserFoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoodFdcId");

                    b.HasIndex("UserFoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Consumptions", "Consumption");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Food", b =>
                {
                    b.Property<int>("FdcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FdcId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Foods", "Food");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories", "Food");
                });

            modelBuilder.Entity("HealthyCalorie.User.Storage.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", "User");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserFoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserFoodCategoryId");

                    b.ToTable("UserFoods", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserFoodCategories", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.ConsumptionTracking.Storage.Entities.Consumption", b =>
                {
                    b.HasOne("HealthyCalorie.Food.Storage.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodFdcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyCalorie.UserFood.Storage.Entities.UserFood", "UserFood")
                        .WithMany()
                        .HasForeignKey("UserFoodId");

                    b.HasOne("HealthyCalorie.User.Storage.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Food", b =>
                {
                    b.HasOne("HealthyCalorie.Food.Storage.Entities.FoodCategory", "FoodCategory")
                        .WithMany("Foods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFood", b =>
                {
                    b.HasOne("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", "UserFoodCategory")
                        .WithMany("UserFoods")
                        .HasForeignKey("UserFoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFoodCategory");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", b =>
                {
                    b.Navigation("UserFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
