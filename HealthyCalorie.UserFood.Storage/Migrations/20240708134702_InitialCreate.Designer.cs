// <auto-generated />
using System;
using HealthyCalorie.UserFood.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyCalorie.UserFood.Storage.Migrations
{
    [DbContext(typeof(UserFoodDbContext))]
    [Migration("20240708134702_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserFoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserFoodCategoryId");

                    b.ToTable("UserFoods", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserFoodCategories", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NutrientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserFoodId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId")
                        .IsUnique();

                    b.HasIndex("UserFoodId");

                    b.ToTable("UserFoodNutrients", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nutrients", "UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFood", b =>
                {
                    b.HasOne("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", "UserFoodCategory")
                        .WithMany("UserFoods")
                        .HasForeignKey("UserFoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFoodCategory");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodNutrient", b =>
                {
                    b.HasOne("HealthyCalorie.UserFood.Storage.Entities.UserNutrient", "Nutrient")
                        .WithOne("UserFoodNutrient")
                        .HasForeignKey("HealthyCalorie.UserFood.Storage.Entities.UserFoodNutrient", "NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyCalorie.UserFood.Storage.Entities.UserFood", "UserFood")
                        .WithMany()
                        .HasForeignKey("UserFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserFoodCategory", b =>
                {
                    b.Navigation("UserFoods");
                });

            modelBuilder.Entity("HealthyCalorie.UserFood.Storage.Entities.UserNutrient", b =>
                {
                    b.Navigation("UserFoodNutrient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
