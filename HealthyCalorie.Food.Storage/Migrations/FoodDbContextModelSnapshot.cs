// <auto-generated />
using System;
using HealthyCalorie.Food.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyCalorie.Food.Storage.Migrations
{
    [DbContext(typeof(FoodDbContext))]
    partial class FoodDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Food", b =>
                {
                    b.Property<int>("FdcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FdcId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories", (string)null);
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("FdcId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodFdcId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NutrientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoodFdcId");

                    b.HasIndex("NutrientId");

                    b.ToTable("FoodNutrients", (string)null);
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nutrients", (string)null);
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Food", b =>
                {
                    b.HasOne("HealthyCalorie.Food.Storage.Entities.FoodCategory", "FoodCategory")
                        .WithMany("Foods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodNutrient", b =>
                {
                    b.HasOne("HealthyCalorie.Food.Storage.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodFdcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyCalorie.Food.Storage.Entities.Nutrient", "Nutrient")
                        .WithMany("FoodNutrients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("HealthyCalorie.Food.Storage.Entities.Nutrient", b =>
                {
                    b.Navigation("FoodNutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
